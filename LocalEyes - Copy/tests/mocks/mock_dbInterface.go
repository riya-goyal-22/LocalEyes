// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\rgoyal\GolandProjects\MinorProjectCli\LocalEyes\internal\interfaces\dbInterface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockCollectionInterface is a mock of CollectionInterface interface.
type MockCollectionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionInterfaceMockRecorder
}

// MockCollectionInterfaceMockRecorder is the mock recorder for MockCollectionInterface.
type MockCollectionInterfaceMockRecorder struct {
	mock *MockCollectionInterface
}

// NewMockCollectionInterface creates a new mock instance.
func NewMockCollectionInterface(ctrl *gomock.Controller) *MockCollectionInterface {
	mock := &MockCollectionInterface{ctrl: ctrl}
	mock.recorder = &MockCollectionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionInterface) EXPECT() *MockCollectionInterfaceMockRecorder {
	return m.recorder
}

// DeleteMany mocks base method.
func (m *MockCollectionInterface) DeleteMany(ctx context.Context, filter interface{}) (*mongo.DeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", ctx, filter)
	ret0, _ := ret[0].(*mongo.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockCollectionInterfaceMockRecorder) DeleteMany(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockCollectionInterface)(nil).DeleteMany), ctx, filter)
}

// DeleteOne mocks base method.
func (m *MockCollectionInterface) DeleteOne(ctx context.Context, filter interface{}) (*mongo.DeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOne", ctx, filter)
	ret0, _ := ret[0].(*mongo.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockCollectionInterfaceMockRecorder) DeleteOne(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockCollectionInterface)(nil).DeleteOne), ctx, filter)
}

// Find mocks base method.
func (m *MockCollectionInterface) Find(ctx context.Context, filter interface{}, opts ...*options.FindOptions) (*mongo.Cursor, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(*mongo.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCollectionInterfaceMockRecorder) Find(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCollectionInterface)(nil).Find), varargs...)
}

// FindOne mocks base method.
func (m *MockCollectionInterface) FindOne(ctx context.Context, filter interface{}) *mongo.SingleResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, filter)
	ret0, _ := ret[0].(*mongo.SingleResult)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockCollectionInterfaceMockRecorder) FindOne(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockCollectionInterface)(nil).FindOne), ctx, filter)
}

// InsertOne mocks base method.
func (m *MockCollectionInterface) InsertOne(ctx context.Context, document interface{}) (*mongo.InsertOneResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOne", ctx, document)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockCollectionInterfaceMockRecorder) InsertOne(ctx, document interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockCollectionInterface)(nil).InsertOne), ctx, document)
}

// UpdateFields mocks base method.
func (m *MockCollectionInterface) UpdateFields(ctx context.Context, filter, updates interface{}) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFields", ctx, filter, updates)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFields indicates an expected call of UpdateFields.
func (mr *MockCollectionInterfaceMockRecorder) UpdateFields(ctx, filter, updates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFields", reflect.TypeOf((*MockCollectionInterface)(nil).UpdateFields), ctx, filter, updates)
}

