// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\rgoyal\GolandProjects\MinorProjectCli\LocalEyes\internal\interfaces\questionRepoInterface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "localEyes/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockQuestionRepository is a mock of QuestionRepository interface.
type MockQuestionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionRepositoryMockRecorder
}

// MockQuestionRepositoryMockRecorder is the mock recorder for MockQuestionRepository.
type MockQuestionRepositoryMockRecorder struct {
	mock *MockQuestionRepository
}

// NewMockQuestionRepository creates a new mock instance.
func NewMockQuestionRepository(ctrl *gomock.Controller) *MockQuestionRepository {
	mock := &MockQuestionRepository{ctrl: ctrl}
	mock.recorder = &MockQuestionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionRepository) EXPECT() *MockQuestionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockQuestionRepository) Create(question *models.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", question)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockQuestionRepositoryMockRecorder) Create(question interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQuestionRepository)(nil).Create), question)
}

// DeleteByPId mocks base method.
func (m *MockQuestionRepository) DeleteByPId(PId primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByPId", PId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByPId indicates an expected call of DeleteByPId.
func (mr *MockQuestionRepositoryMockRecorder) DeleteByPId(PId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByPId", reflect.TypeOf((*MockQuestionRepository)(nil).DeleteByPId), PId)
}

// DeleteOneDoc mocks base method.
func (m *MockQuestionRepository) DeleteOneDoc(filter interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneDoc", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneDoc indicates an expected call of DeleteOneDoc.
func (mr *MockQuestionRepositoryMockRecorder) DeleteOneDoc(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneDoc", reflect.TypeOf((*MockQuestionRepository)(nil).DeleteOneDoc), filter)
}

// GetAllQuestions mocks base method.
func (m *MockQuestionRepository) GetAllQuestions() ([]*models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuestions")
	ret0, _ := ret[0].([]*models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQuestions indicates an expected call of GetAllQuestions.
func (mr *MockQuestionRepositoryMockRecorder) GetAllQuestions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuestions", reflect.TypeOf((*MockQuestionRepository)(nil).GetAllQuestions))
}

// GetQuestionsByPId mocks base method.
func (m *MockQuestionRepository) GetQuestionsByPId(PId primitive.ObjectID) ([]*models.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionsByPId", PId)
	ret0, _ := ret[0].([]*models.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionsByPId indicates an expected call of GetQuestionsByPId.
func (mr *MockQuestionRepositoryMockRecorder) GetQuestionsByPId(PId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionsByPId", reflect.TypeOf((*MockQuestionRepository)(nil).GetQuestionsByPId), PId)
}

// UpdateQuestion mocks base method.
func (m *MockQuestionRepository) UpdateQuestion(QId primitive.ObjectID, answer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestion", QId, answer)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockQuestionRepositoryMockRecorder) UpdateQuestion(QId, answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockQuestionRepository)(nil).UpdateQuestion), QId, answer)
}
