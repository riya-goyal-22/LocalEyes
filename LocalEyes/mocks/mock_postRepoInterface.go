// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\rgoyal\GolandProjects\MinorProjectCli\LocalEyes\internal\interfaces\postRepoInterface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "localEyes/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockPostRepository is a mock of PostRepository interface.
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository.
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance.
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPostRepository) Create(post *models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPostRepositoryMockRecorder) Create(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostRepository)(nil).Create), post)
}

// DeleteByUId mocks base method.
func (m *MockPostRepository) DeleteByUId(UId primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByUId", UId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUId indicates an expected call of DeleteByUId.
func (mr *MockPostRepositoryMockRecorder) DeleteByUId(UId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUId", reflect.TypeOf((*MockPostRepository)(nil).DeleteByUId), UId)
}

// DeleteOneDoc mocks base method.
func (m *MockPostRepository) DeleteOneDoc(filter interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneDoc", filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneDoc indicates an expected call of DeleteOneDoc.
func (mr *MockPostRepositoryMockRecorder) DeleteOneDoc(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneDoc", reflect.TypeOf((*MockPostRepository)(nil).DeleteOneDoc), filter)
}

// GetAllPosts mocks base method.
func (m *MockPostRepository) GetAllPosts() ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts")
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostRepositoryMockRecorder) GetAllPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostRepository)(nil).GetAllPosts))
}

// GetPostsByFilter mocks base method.
func (m *MockPostRepository) GetPostsByFilter(filter interface{}) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsByFilter", filter)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsByFilter indicates an expected call of GetPostsByFilter.
func (mr *MockPostRepositoryMockRecorder) GetPostsByFilter(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsByFilter", reflect.TypeOf((*MockPostRepository)(nil).GetPostsByFilter), filter)
}

// UpdateLike mocks base method.
func (m *MockPostRepository) UpdateLike(PId primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLike", PId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLike indicates an expected call of UpdateLike.
func (mr *MockPostRepositoryMockRecorder) UpdateLike(PId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLike", reflect.TypeOf((*MockPostRepository)(nil).UpdateLike), PId)
}

// UpdateUserPost mocks base method.
func (m *MockPostRepository) UpdateUserPost(PId, UId primitive.ObjectID, title, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPost", PId, UId, title, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPost indicates an expected call of UpdateUserPost.
func (mr *MockPostRepositoryMockRecorder) UpdateUserPost(PId, UId, title, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPost", reflect.TypeOf((*MockPostRepository)(nil).UpdateUserPost), PId, UId, title, content)
}
